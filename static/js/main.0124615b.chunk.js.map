{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAddMovie","useState","searchQuery","setSearchQuery","foundMovie","setFoundMovie","errorMessage","setErrorMessage","isLoading","setIsLoading","handleSubmit","event","a","preventDefault","query","trim","fetch","then","res","json","catch","Response","Error","response","Title","Poster","Plot","imdbID","message","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","cn","disabled","onClick","App","setMovies","handleAddMovie","useCallback","some","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0124615b.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React, { memo } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import { FC, memo, useState } from 'react';\nimport cn from 'classnames';\n\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  onAddMovie: (movie: Movie) => void\n};\n\nexport const FindMovie: FC<Props> = memo(({ onAddMovie }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [foundMovie, setFoundMovie] = useState<Movie | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearchQueryChange\n    = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchQuery(event.target.value);\n      setErrorMessage('');\n    };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n      const response = await getMovie(searchQuery.trim());\n\n      if ('Error' in response) {\n        throw new Error(response.Error);\n      }\n\n      const {\n        Title, Poster, Plot, imdbID,\n      } = response;\n\n      setFoundMovie({\n        title: Title,\n        description: Plot,\n        imgUrl: Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : Poster,\n        imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n        imdbId: imdbID,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      setErrorMessage(error?.message ?? 'unexpected error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddBtnClick = () => {\n    if (foundMovie) {\n      onAddMovie(foundMovie);\n    }\n\n    setSearchQuery('');\n    setFoundMovie(null);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={(event) => handleSubmit(event)}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={searchQuery}\n              onChange={handleSearchQueryChange}\n            />\n          </div>\n\n          {errorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!searchQuery.trim()}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {foundMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddBtnClick}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {foundMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={foundMovie} />\n        </div>\n      )}\n\n    </>\n  );\n});\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=96d58664';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleAddMovie = useCallback((movie: Movie) => {\n    const isDuplicate = movies.some(({ imdbId }) => imdbId === movie.imdbId);\n\n    if (!isDuplicate) {\n      setMovies(prev => ([\n        ...prev,\n        movie,\n      ]));\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}